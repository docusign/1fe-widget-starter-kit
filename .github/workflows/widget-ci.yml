name: Reusable Minimal Widget CI
permissions:
  contents: write
  id-token: write
on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "22"
      base-branch:
        description: "The base branch to commit/tag back to"
        required: false
        type: string
        default: "main"
    secrets:
      PRIVATE_KEY_FOR_1FE:
        required: true
      PRIVATE_KEY_FOR_WIDGET_BASE_CONFIG:
        required: true
      AKAMAI_NS_SSH_PRIVATE_KEY:
        required: true
      AZURE_APP_CONFIG_CONNECTION_STRING:
        required: true

jobs:
  build:
    name: Build and Commit Version
    runs-on: ubuntu-latest
    outputs:
      widgetId: ${{ steps.set_vars.outputs.widgetId }}
      nextVersion: ${{ steps.set_vars.outputs.nextVersion }}
    steps:
      - name: Checkout Caller's Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config --global user.email "DevOpsTeam@docusign.com"
          git config --global user.name "svc-git-devops"
      - name: Set up dependency SSH keys
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.PRIVATE_KEY_FOR_1FE }}
            ${{ secrets.PRIVATE_KEY_FOR_WIDGET_BASE_CONFIG }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
      - name: Install Dependencies
        run: yarn install --no-immutable
      - name: Build the Widget
        run: yarn build:widget
      - name: Calculate next version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            npm version prepatch --no-git-tag-version --preid "PR-${{ github.event.pull_request.number }}.${GITHUB_SHA::7}"
          elif [[ "${{ github.ref_name }}" == "${{ inputs.base-branch }}" ]]; then
            npm version patch --no-git-tag-version
          fi
      - name: Set Widget ID and Version Output
        id: set_vars
        run: |
          echo "widgetId=$(npm pkg get name | tr -d '"')" >> $GITHUB_OUTPUT
          echo "nextVersion=$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT
      - name: Upload to Akamai (Integration)
        env:
          AKAMAI_NS_SSH_PRIVATE_KEY: ${{ secrets.AKAMAI_NS_SSH_PRIVATE_KEY }}
          WIDGET_ID: ${{ steps.set_vars.outputs.widgetId }}
          NEXT_VERSION: ${{ steps.set_vars.outputs.nextVersion }}
        run: |
          # Akamai upload script here...
          set -e
          SSH_KEY_PATH="$HOME/key.pem"
          printf "%s\n" "$AKAMAI_NS_SSH_PRIVATE_KEY" > "$SSH_KEY_PATH"
          chmod 600 "$SSH_KEY_PATH"
          local_source_dir="dist"
          staging_dir="staging_for_rsync"
          relative_path_to_create="integration/widgets/$WIDGET_ID/$NEXT_VERSION"
          full_staging_path="$staging_dir/$relative_path_to_create"
          mkdir -p "$full_staging_path"
          cp -a "$local_source_dir/." "$full_staging_path/"
          REMOTE_HOST="sshacs@1fe.rsync.upload.akamai.com"
          SSH_OPTS="-o StrictHostKeyChecking=no -oBatchMode=yes -i $SSH_KEY_PATH"
          cd "$staging_dir"
          rsync -avvRO -e "ssh $SSH_OPTS" "integration/" "$REMOTE_HOST:"
          cd ..
          rm -rf "$staging_dir"
          shred -u "$SSH_KEY_PATH" || rm -f "$SSH_KEY_PATH"
          
      # --- CHANGED: Archiving the full environment ---
      - name: Archive Full Environment for Tests
        uses: actions/upload-artifact@v4
        with:
          name: full-test-environment
          path: |
            .
            !node_modules/.cache
            !**/.git
            !**/.github
      
      - name: Commit, Tag and Push Version
        if: github.ref_name == inputs.base-branch
        run: |
          # Commit and push script here...
          set -e
          VERSION="${{ steps.set_vars.outputs.nextVersion }}"
          WIDGET_NAME="${{ steps.set_vars.outputs.widgetId }}"
          INTEGRATION_CDN_URL="https://1fe-a.akamaihd.net/integration/widgets"
          PREVIEW_URL="https://demo.1fe.com/bathtub"
          BUNDLE_URL="${INTEGRATION_CDN_URL}/${WIDGET_NAME}/${VERSION}/js/1fe-bundle.js"
          COMMIT_MSG="Bundle will be uploaded to: ${BUNDLE_URL} / Preview here: ${PREVIEW_URL}?widgetUrl=${BUNDLE_URL}&fixPreview=true [skip ci]"
          git add package.json
          git commit --amend -m "$COMMIT_MSG"
          git tag -a "$VERSION" -m "New release: $VERSION"
          git push origin "HEAD:${{ inputs.base-branch }}" --follow-tags --no-verify

  # ------ PARALLEL PRE-RELEASE TESTING STAGES ------
  lint-test:
    name: Lint Test
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Download Full Test Environment
        uses: actions/download-artifact@v4
        with:
          name: full-test-environment
      - name: Run Linting
        run: yarn lint

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Download Full Test Environment
        uses: actions/download-artifact@v4
        with:
          name: full-test-environment
      - name: Run Unit Tests
        run: yarn test

  contract-test:
    name: Contract Test
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Download Full Test Environment
        uses: actions/download-artifact@v4
        with:
          name: full-test-environment
      - name: Run Contract Tests
        run: echo "Running contract tests..." # TODO: Add commands

  playwright-test:
    name: Playwright E2E Test
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Download Full Test Environment
        uses: actions/download-artifact@v4
        with:
          name: full-test-environment
      - name: Run Playwright tests
        run: npx playwright test

  # ------ FULL DEPLOYMENT PIPELINE (BASE BRANCH ONLY) ------
  # (The rest of the file is unchanged)

  release-integration:
    name: Release to Integration
    needs: [build, lint-test, unit-test, contract-test, playwright-test]
    if: github.ref_name == inputs.base-branch
    uses: ./.github/workflows/reusable-update-azure-config.yml
    with:
      environment: integration
      widgetId: ${{ needs.build.outputs.widgetId }}
      nextVersion: ${{ needs.build.outputs.nextVersion }}
    secrets:
      AZURE_APP_CONFIG_CONNECTION_STRING: ${{ secrets.AZURE_APP_CONFIG_CONNECTION_STRING }}

  upload-production:
    name: Upload to Production
    runs-on: ubuntu-latest
    needs: [build, release-integration]
    if: github.ref_name == inputs.base-branch
    env:
      AKAMAI_NS_SSH_PRIVATE_KEY: ${{ secrets.AKAMAI_NS_SSH_PRIVATE_KEY }}
      WIDGET_ID: ${{ needs.build.outputs.widgetId }}
      NEXT_VERSION: ${{ needs.build.outputs.nextVersion }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: full-test-environment # Download the same full artifact
          path: .
      - name: Upload to Akamai (Production)
        run: |
          # Production Akamai upload script here...
          set -e
          SSH_KEY_PATH="$HOME/key.pem"
          printf "%s\n" "$AKAMAI_NS_SSH_PRIVATE_KEY" > "$SSH_KEY_PATH"
          chmod 600 "$SSH_KEY_PATH"
          local_source_dir="dist"
          staging_dir="staging_for_rsync"
          relative_path_to_create="production/widgets/$WIDGET_ID/$NEXT_VERSION"
          full_staging_path="$staging_dir/$relative_path_to_create"
          mkdir -p "$full_staging_path"
          cp -a "$local_source_dir/." "$full_staging_path/"
          REMOTE_HOST="sshacs@1fe.rsync.upload.akamai.com"
          SSH_OPTS="-o StrictHostKeyChecking=no -oBatchMode=yes -i $SSH_KEY_PATH"
          cd "$staging_dir"
          rsync -avvRO -e "ssh $SSH_OPTS" "production/" "$REMOTE_HOST:"
          cd ..
          rm -rf "$staging_dir"
          shred -u "$SSH_KEY_PATH" || rm -f "$SSH_KEY_PATH"

  test-production:
    name: Test Production
    runs-on: ubuntu-latest
    needs: upload-production
    if: github.ref_name == inputs.base-branch
    steps:
      - name: Run production smoke tests
        run: echo "Running post-upload tests on production..." # TODO: Add tests

  release-production:
    name: Release to Production
    needs: [build, test-production]
    if: github.ref_name == inputs.base-branch
    environment: production-release
    uses: ./.github/workflows/reusable-update-azure-config.yml
    with:
      environment: production
      widgetId: ${{ needs.build.outputs.widgetId }}
      nextVersion: ${{ needs.build.outputs.nextVersion }}
    secrets:
      AZURE_APP_CONFIG_CONNECTION_STRING: ${{ secrets.AZURE_APP_CONFIG_CONNECTION_STRING }}